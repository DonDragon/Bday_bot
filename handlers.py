import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import re
import vobject
from datetime import datetime

from database import (
    add_birthday, get_birthdays, delete_birthday, edit_birthday,
    set_user_locale, get_user_locale
)
from reminder import set_reminder
from vcf_parser import parse_vcf
from i18n import _
from config import ADMIN_IDS

from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Callable, Awaitable, Dict, Any

from aiogram.utils.i18n import I18n
from pathlib import Path
from config import I18N_DOMAIN

# FSM-—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
class AddBirthday(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –∏–∑ VCF-—Ñ–∞–π–ª–∞
class ImportStates(StatesGroup):
    waiting_for_vcf = State()

def MENU_KEYS():
    return {
        "list": f"üìÖ {_('–°–ø–∏—Å–æ–∫')}",
        "add": f"‚ûï {_('–î–æ–±–∞–≤–∏—Ç—å')}",
        "import": f"üì• {_('–ò–º–ø–æ—Ä—Ç')}",
        "settings": f"‚öôÔ∏è {_('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')}",
    }

def get_main_menu():
    keys = MENU_KEYS()
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=keys["list"]), KeyboardButton(text=keys["add"])],
            [KeyboardButton(text=keys["import"]), KeyboardButton(text=keys["settings"])]
        ],
        resize_keyboard=True
    )

async def send_main_menu(message):
    await message.answer(_("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é."), reply_markup=get_main_menu())

class LocaleMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]], event: types.Message, data: Dict[str, Any]) -> Any:
        user_id = event.from_user.id
        event._locale = get_user_locale(user_id)
        return await handler(event, data)

router = Router()
router.message.middleware(LocaleMiddleware())

@router.message(Command("start"))
async def start_cmd(message: types.Message):
    await send_main_menu(message)

# –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ —Å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
@router.message(F.text.func(lambda t: t and any(lang in t for lang in ["–†—É—Å—Å–∫–∏–π", "English", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "Portugu√™s"])))
async def set_language(message: types.Message):
    text = message.text.strip()
    user_id = message.from_user.id
    new_locale = None

    if "–†—É—Å—Å–∫–∏–π" in text:
        set_user_locale(user_id, 'ru')
        await message.answer("–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: üá∑üá∫ –†—É—Å—Å–∫–∏–π")
        new_locale = 'ru'
    elif "English" in text:
        set_user_locale(user_id, 'en')
        await message.answer("Language set to: üá∫üá∏ English")
        new_locale = 'en'
    elif "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in text:
        set_user_locale(user_id, 'uk')
        await message.answer("–ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
        new_locale = 'uk'
    elif "Portugu√™s" in text:
        set_user_locale(user_id, 'pt')
        await message.answer("Idioma definido: üáµüáπ Portugu√™s")
        new_locale = 'pt'

    if new_locale:
        LOCALES_DIR = Path(__file__).parent / "locales"
        temp_i18n = I18n(path=LOCALES_DIR, default_locale=new_locale, domain=I18N_DOMAIN)
        _t = temp_i18n.gettext
        def temp_menu():
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=f"üìÖ {_t('–°–ø–∏—Å–æ–∫')}"), KeyboardButton(text=f"‚ûï {_t('–î–æ–±–∞–≤–∏—Ç—å')}")],
                    [KeyboardButton(text=f"üì• {_t('–ò–º–ø–æ—Ä—Ç')}"), KeyboardButton(text=f"‚öôÔ∏è {_t('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')}")]
                ],
                resize_keyboard=True
            )
        await message.answer(_t("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é."), reply_markup=temp_menu())

# FSM: –∂–¥—ë–º –∏–º—è
@router.message(AddBirthday.waiting_for_name)
async def add_birthday_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(_("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º):"))
    await state.set_state(AddBirthday.waiting_for_date)

# FSM: –∂–¥—ë–º –¥–∞—Ç—É
@router.message(AddBirthday.waiting_for_date)
async def add_birthday_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id') or message.from_user.id
    name = data.get('name')
    date_text = message.text.strip()
    normalized = re.sub(r"[\/\-\s]", ".", date_text)
    if not re.match(r"^\d{1,2}\.\d{1,2}$", normalized):
        await message.answer(_("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ –¥–¥.–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 05.12"))
        return
    try:
        day, month = map(int, normalized.split('.'))
        datetime(year=2000, month=month, day=day)
    except Exception:
        await message.answer(_("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ –¥–¥.–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 05.12"))
        return
    add_birthday(user_id, name, normalized)
    await message.answer(_("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω!"))
    await send_main_menu(message)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /import ‚Äî –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é
@router.message(F.text == MENU_KEYS()["import"])
async def import_birthday_request(message: types.Message, state: FSMContext):
    await message.answer(_("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .vcf —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π."))
    await state.set_state(ImportStates.waiting_for_vcf)

# FSM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ .vcf
@router.message(ImportStates.waiting_for_vcf, F.document)
async def import_birthday_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    document = message.document
    file = await message.bot.get_file(document.file_id)
    file_data = await message.bot.download_file(file.file_path)
    vcf_content = file_data.read().decode("utf-8")
    count = 0
    for vcard in vobject.readComponents(vcf_content):
        name = vcard.fn.value if hasattr(vcard, 'fn') else None
        if hasattr(vcard, 'bday'):
            try:
                bday = vcard.bday.value
                if hasattr(bday, "strftime"):
                    date_str = bday.strftime("%d.%m")
                else:
                    parts = str(bday).split('-')
                    if len(parts) == 3:
                        date_str = f"{int(parts[2]):02}.{int(parts[1]):02}"
                    else:
                        continue
                if name and date_str:
                    add_birthday(user_id, name, date_str)
                    count += 1
            except Exception as ex:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏ {name}: {ex}")
    await message.answer(_(f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}"))
    await send_main_menu(message)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω—ã—Ö —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥ (–≤—Å–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
@router.message(Command("list"))
async def list_cmd(message: types.Message):
    user_id = message.from_user.id
    bdays = get_birthdays(user_id)
    if not bdays:
        await message.answer(_("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."))
    else:
        reply = "\n".join([f"{b['name']}: {b['date']}" for b in bdays])
        await message.answer(reply)
    await send_main_menu(message)

@router.message(Command("delete"))
async def delete_cmd(message: types.Message):
    user_id = message.from_user.id
    name = message.text.replace("/delete", "").strip()
    if delete_birthday(user_id, name):
        await message.answer(_("–£–¥–∞–ª–µ–Ω–æ."))
    else:
        await message.answer(_("–ù–µ –Ω–∞–π–¥–µ–Ω–æ."))
    await send_main_menu(message)

@router.message(Command("edit"))
async def edit_cmd(message: types.Message):
    user_id = message.from_user.id
    args = message.text.replace("/edit", "").strip().split()
    if len(args) >= 2:
        name, new_date = args[0], args[1]
        if edit_birthday(user_id, name, new_date):
            await message.answer(_("–û–±–Ω–æ–≤–ª–µ–Ω–æ."))
            await set_reminder(name, new_date)
        else:
            await message.answer(_("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."))
    else:
        await message.answer(_("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /edit –ò–≤–∞–Ω 13.07"))
    await send_main_menu(message)

@router.message(Command("broadcast"))
async def broadcast_cmd(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer(_("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."))
    text = message.text.replace("/broadcast", "").strip()
    if not text:
        return await message.answer(_("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."))
    await message.answer(_("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: \n") + text)
    await send_main_menu(message)

@router.message(Command("settings"))
async def settings_cmd(message: types.Message):
    buttons = [
        [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá∫üá∏ English")],
        [KeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"), KeyboardButton(text="üáµüáπ Portugu√™s")]
    ]
    lang_menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"), reply_markup=lang_menu)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@router.message()
async def main_menu_handler(message: types.Message, state: FSMContext):
    keys = MENU_KEYS()
    text = message.text

    if text == keys["list"]:
        user_id = message.from_user.id
        bdays = get_birthdays(user_id)
        if not bdays:
            await message.answer(_("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."))
        else:
            reply = "\n".join([f"{b['name']}: {b['date']}" for b in bdays])
            await message.answer(reply)
        await send_main_menu(message)

    elif text == keys["add"]:
        await message.answer(_("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:"))
        await state.set_state(AddBirthday.waiting_for_name)
        await state.update_data(user_id=message.from_user.id)

    elif text == keys["import"]:
        await message.answer(_("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .vcf —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π."))
        await state.set_state(ImportStates.waiting_for_vcf)

    elif text == keys["settings"]:
        buttons = [
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá∫üá∏ English")],
            [KeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"), KeyboardButton(text="üáµüáπ Portugu√™s")]
        ]
        lang_menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
        await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"), reply_markup=lang_menu)

def register_handlers(dp):
    dp.include_router(router)
